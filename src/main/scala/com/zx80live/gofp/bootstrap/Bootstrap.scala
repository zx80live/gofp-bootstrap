package com.zx80live.gofp.bootstrap

import java.io._

object Bootstrap extends App {

  def fileHeader(name: String, pack: String = "fp", imports: Seq[String] = Nil) =
    println(
      s"""// $name.go
         |// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap
         |
         |package $pack
         |
         |${imports.map(i => "import \"" + i + "\"").mkString("", "\n", "")}
         |""".stripMargin)


  def toFile(filename: String,
            pack: String = "fp",
            imports: Seq[String] = Nil,
             content: Seq[String] = Nil):Unit = {
    val writer = new BufferedWriter(new FileWriter(new File(filename)))

    try {
      writer.write(
        s"""// $filename
           |// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap
           |
           |package $pack
           |
           |${imports.map(i => "import \"" + i + "\"").mkString("", "\n", "")}
           |""".stripMargin
      )
      content foreach writer.write
    } finally {
      writer.close()
    }
  }




  //  fileHeader("fpredicate")
  //  Predicates.predicateTypeDeclarations foreach println

  //    fileHeader("fequal")
  //    Equals.allEquals foreach println

  //    fileHeader("fpredicate_eq")
  //    Predicates.predicateEq foreach println

  //    fileHeader("fmkstring", imports = Seq("fmt"))
  //    MkStrings.arraysMkString foreach println

  //  fileHeader("ftostring", imports = Seq("fmt"))
  //  ToStrings.allToStrings foreach println

//  fileHeader("ffunctor")
//  Functors.functorTypeDeclarations foreach println
  toFile("ffunctor_map.go", content = Functors.functorMaps)
}







