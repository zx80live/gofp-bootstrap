package com.zx80live.gofp.bootstrap

import java.io._

object Bootstrap extends App {
  val root = "/home/work/gofp/fp/"

  def fileHeader(name: String, pack: String = "fp", imports: Seq[String] = Nil) =
    println(
      s"""// $name.go
         |// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap
         |
         |package $pack
         |
         |${imports.map(i => "import \"" + i + "\"").mkString("", "\n", "")}
         |""".stripMargin)


  def toFile(filename: String,
             pack: String = "fp",
             imports: Seq[String] = Nil,
             content: Seq[String] = Nil): Unit = {
    val writer = new BufferedWriter(new FileWriter(new File(root + "/" + filename)))

    try {
      writer.write(
        s"""// $filename
           |// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap
           |
           |package $pack
           |
           |${imports.map(i => "import \"" + i + "\"").mkString("", "\n", "")}
           |""".stripMargin
      )
      content foreach writer.write
    } finally {
      writer.close()
    }
  }


  toFile("fpredicate.go", content = Predicates.predicateTypeDeclarations)
  toFile("fequal.go", content = Equals.allEquals)
  toFile("fpredicate_eq.go", content = Predicates.predicateEq)
  toFile("fmkstring.go", imports = Seq("fmt"), content = MkStrings.arraysMkString)
  toFile("ftostring.go", imports = Seq("fmt"), content = ToStrings.allToStrings)
  toFile("ffunctor.go", content =
    Functors.functorTypeDeclarations ++ Functors.emptyFunctors
  )
  toFile("ffunctor_map.go", content = Functors.functorMaps)
  toFile("flist.go", imports = Seq("reflect"), content = List.lists ++ List.listsNil ++ List.listsEmptyNonEmpty)
  toFile("flist_make.go", content = List.listsMake)
  toFile("flist_head.go", content = List.listsHead)
  toFile("flist_tail.go", content = List.listsTail)
  toFile("flist_copy.go", content = List.listsCopy)
  toFile("flist_cons.go", content = List.listsCons)
  //  toFile("flist_foreach.go", content = List.listsForeach) //TODO need optional
  //  toFile("flist_reverse.go", content = List.listsReverse) //TODO need optional
  //  toFile("flist__mapHead.go", content = List.lists_mapHead) //TODO need optional
}







